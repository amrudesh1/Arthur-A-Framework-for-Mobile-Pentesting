import os
import xml.etree.ElementTree as eTree
from colorama import Fore, Back, Style


class ManifestParser:
    package_details_set = set()
    permission_set = set()
    activities_set = set()
    features_set = set()
    custom_permissions_set = set()
    services_set = set()
    receivers_set = set()
    providers_set = set()

    NS_ANDROID = '{http://schemas.android.com/apk/res/android}'
    NS_ANDROID_NAME_URI = '{http://schemas.android.com/apk/res/android}name'
    NS_ANDROID_AUTHORITIES_URI = '{http://schemas.android.com/apk/res/android}authorities'
    NS_ANDROID_EXPORTED_URI = '{http://schemas.android.com/apk/res/android}exported'
    danger_permissions = ['android.permission.ACCEPT_HANDOVER',
                          'android.permission.ACCESS_BACKGROUND_LOCATION',
                          'android.permission.ACCESS_COARSE_LOCATION',
                          'android.permission.ACCESS_MEDIA_LOCATION',
                          'android.permission.ACCESS_FINE_LOCATION',
                          'android.permission.ACTIVITY_RECOGNITION',
                          'android.permission.ADD_VOICEMAIL',
                          'android.permission.ANSWER_PHONE_CALLS',
                          'android.permission.BLUETOOTH_ADVERTISE',
                          'android.permission.BLUETOOTH_CONNECT',
                          'android.permission.BLUETOOTH_SCAN',
                          'android.permission.BODY_SENSORS',
                          'android.permission.CALL_PHONE',
                          'android.permission.CAMERA',
                          'android.permission.GET_ACCOUNTS',
                          'android.permission.READ_CALENDAR',
                          'android.permission.READ_CALL_LOG',
                          'android.permission.READ_CONTACTS',
                          'android.permission.READ_EXTERNAL_STORAGE',
                          'android.permission.READ_PHONE_NUMBERS',
                          'android.permission.READ_PHONE_STATE',
                          'android.permission.READ_SMS',
                          'android.permission.RECEIVE_MMS',
                          'android.permission.RECEIVE_SMS',
                          'android.permission.RECEIVE_WAP_PUSH',
                          'android.permission.RECORD_AUDIO',
                          'android.permission.SEND_SMS',
                          'android.permission.USE_SIP',
                          'android.permission.UWB_RANGING',
                          'android.permission.WRITE_CALENDAR',
                          'android.permission.WRITE_CALL_LOG',
                          'android.permission.WRITE_CONTACTS',
                          'android.permission.WRITE_EXTERNAL_STORAGE',
                          'android.permission.PROCESS_OUTGOING_CALLS']

    def __init__(self, manifest_path):
        self.packageName = None
        self.platformBuildVersionName = None
        self.platformBuildVersionCode = None
        self.manifest_path = manifest_path
        self.parse_manifest_file()

    def parse_manifest_file(self):
        manifest_file = self.manifest_path + '/AndroidManifest.xml'
        xml_tree = eTree.parse(manifest_file)
        root = xml_tree.getroot()

        # Extract Version Details and Package Name
        self.platformBuildVersionCode = root.attrib['platformBuildVersionCode']
        self.platformBuildVersionName = root.attrib['platformBuildVersionName']
        self.platformBuildVersionName = root.attrib['platformBuildVersionName']
        self.packageName = root.attrib['package']
        self.package_details_set.add("PackageName:" + self.packageName)
        self.package_details_set.add("Version Code::" + self.packageName)
        self.package_details_set.add(
            "Platform Build Version Code:" + self.packageName)
        self.package_details_set.add(
            "Platform Build Version Name:" + self.packageName)
        print(Fore.YELLOW + "Package Details: " + Style.RESET_ALL)
        # print(self.package_details_set)

        # Find System or Hardware Permissions from Manifest File
        permissions = root.findall('uses-permission')
        if len(permissions) > 0:
            for permission in permissions:
                if permission.attrib.get(self.NS_ANDROID_NAME_URI) in self.danger_permissions:
                    self.permission_set.add(
                        permission.attrib.get(self.NS_ANDROID_NAME_URI))
            print(Fore.YELLOW + "Dangerous Permissions Requested: " + Fore.RESET)
            # print(self.permission_set)

        # Find Features Used from manifest File
        features = root.findall('uses-feature')
        print(Fore.YELLOW + "Features Used: " + Fore.RESET)
        if len(features) > 0:
            for feature in features:
                self.features_set.add(
                    feature.attrib.get(self.NS_ANDROID_NAME_URI))
        # print(self.features_set)

        # Find Custom Permissions from manifest File
        custom_permission = root.findall('permission')
        print(Fore.YELLOW + "Custom Permissions Used: " + Fore.RESET)
        if len(custom_permission) > 0:
            for feature in custom_permission:
                custom_permission_json = '{' + '"name":"' + feature.attrib.get(
                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"permissionGroup:"' + feature.attrib.get(
                    self.NS_ANDROID + "permissionGroup") + '"' + ',' + '"protectionLevel:"' + feature.attrib.get(
                    self.NS_ANDROID + "protectionLevel") + '"' + '}'
                self.custom_permissions_set.add(custom_permission_json)
            # print(self.custom_permissions_set)

        # Find Activities from Manifest File
        for elements in root:
            if elements.tag == 'application':
                activities = elements.findall('activity')
                if len(activities) > 0:
                    for activity in activities:
                        if activity.attrib.get(self.NS_ANDROID_EXPORTED_URI) is not None:
                            activity_json = '{' + '"name":"' + activity.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + activity.attrib.get(
                                self.NS_ANDROID_EXPORTED_URI) + '"' + ',' + '"action:"' + activity.find(
                                'intent-filter').find('action').attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"category:"' + activity.find(
                                'intent-filter').find('category').attrib.get(self.NS_ANDROID_NAME_URI) + '"' + '}'
                            if activity.find('intent-filter') is not None and activity.find('intent-filter').find(
                                    'action') is not None:
                                activity_json = '{' + '"name":"' + activity.attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + activity.attrib.get(
                                    self.NS_ANDROID_EXPORTED_URI) + '"' + ',' + '"action:"' + activity.find(
                                    'intent-filter').find('action').attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"category:"' + activity.find(
                                    'intent-filter').find('category').attrib.get(self.NS_ANDROID_NAME_URI) + '"' + '}'
                            else:
                                activity_json = '{' + '"name":"' + activity.attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + ',' + '"action:"' + '"' + ',' + '"category:"' + '"' + '}'
                        else:
                            if activity.find('intent-filter') is not None and activity.find('intent-filter').find(
                                    'action') is not None:
                                activity_json = '{' + '"name":"' + activity.attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + ',' + '"action:"' + activity.find(
                                    'intent-filter').find('action').attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"category:"' + activity.find(
                                    'intent-filter').find('category').attrib.get(self.NS_ANDROID_NAME_URI) + '"' + '}'
                            else:
                                activity_json = '{' + '"name":"' + activity.attrib.get(
                                    self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + ',' + '"action:"' + '"' + ',' + '"category:"' + '"' + '}'
                        self.activities_set.add(activity_json)
                    print(Fore.YELLOW + "Activities Used: " + Fore.RESET)
                    # print(self.activities_set)

            # Find Services from Manifest File
        for element in root:
            if element.tag == 'application':
                services = element.findall('service')
                if len(services) > 0:
                    for service in services:
                        if service.attrib.get(self.NS_ANDROID_EXPORTED_URI) is not None:
                            service_json = '{' + '"name":"' + service.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + service.attrib.get(
                                self.NS_ANDROID_EXPORTED_URI) + '"' + '}'
                        else:
                            service_json = '{' + '"name":"' + service.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + '}'
                        self.services_set.add(service_json)
                    print(Fore.YELLOW + "Services Used: " + Fore.RESET)
                    print(self.services_set)

        # Find Receivers from Manifest File
        for element in root:
            if element.tag == 'application':
                receivers = element.findall('receiver')
                if len(receivers) > 0:
                    for receiver in receivers:
                        if receiver.attrib.get(self.NS_ANDROID_EXPORTED_URI) is not None:
                            receiver_json = '{' + '"name":"' + receiver.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + receiver.attrib.get(
                                self.NS_ANDROID_EXPORTED_URI) + '"' + '}'
                        else:
                            receiver_json = '{' + '"name":"' + receiver.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + '}'

                        self.receivers_set.add(receiver_json)
                        print(Fore.YELLOW + "Receivers Used: " + Fore.RESET)
                        print(self.receivers_set)

        # Find Providers from Manifest File
        for element in root:
            if element.tag == 'application':
                providers = element.findall('provider')
                if len(providers) > 0:
                    for provider in providers:
                        if provider.attrib.get(self.NS_ANDROID_EXPORTED_URI) is not None:
                            provider_json = '{' + '"name":"' + provider.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + provider.attrib.get(
                                self.NS_ANDROID_EXPORTED_URI) + '"' + ',' + '"authorities:"' + provider.attrib.get(
                                self.NS_ANDROID_AUTHORITIES_URI) + '}'
                        else:
                            provider_json = '{' + '"name":"' + provider.attrib.get(
                                self.NS_ANDROID_NAME_URI) + '"' + ',' + '"exported:"' + '"' + ',' + '"authorities:"' + provider.attrib.get(
                                self.NS_ANDROID_AUTHORITIES_URI) + '}'
                    self.providers_set.add(provider_json)
                    print(Fore.YELLOW + "Providers Used: " + Fore.RESET)
                    print(self.providers_set)
