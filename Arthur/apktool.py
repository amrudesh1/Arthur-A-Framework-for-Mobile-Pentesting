import os
import subprocess
import shutil


class Apktool:
    def decompile_as_java(self, apk_path):
        proc_code = self.runenjarify([apk_path, "-f"])
        if proc_code.returncode == 0:
            print("Converting APK to JAR Complete")
            jar_file = apk_path.split(".")[0]+"-enjarify.jar"

            if(os.path.exists("Arthur/temp/{}".format(jar_file))):
                os.remove("Arthur/temp/{}".format(jar_file))
            jar_file_status = shutil.move(
                jar_file, "Arthur/temp/{}".format(jar_file))
            if not os.path.exists("Arthur/out/{}".format(apk_path.split(".")[0])):
                os.mkdir("Arthur/out/{}".format(apk_path.split(".")[0]))
            else:
                shutil.rmtree("Arthur/out/{}".format(apk_path.split(".")[0]))

            decompiler_run_stat = self.run_decompiler(
                [jar_file_status, '-o', "Arthur/out/{}".format(apk_path.split(".")[0])])

            if decompiler_run_stat.returncode == 0:
                print("Decompilation Complete find output in:{}".format(
                    "Arthur/out/{}".format(apk_path.split(".")[0])))
            else:
                print("Decompilation Failed")
        else:
            print("Converting APK to JAR failed")

    def decompile_apk(self, apk_path):
        apk_name = os.path.basename(apk_path).split(".")[0]
        temp_dir = "Arthur/temp/{}".format(apk_name)
        if os.path.exists(temp_dir):
            os.removedirs(temp_dir)
        print("Extracting Contents from APK")
        proc = self.runApkTool(["d", apk_path, "-o", temp_dir])
        return proc.returncode, temp_dir

    def recompile_apk(self, args):
        apk_extract_dir = "Arthur/temp/{}".format(args.APK.split(".")[0])
        if os.path.exists(apk_extract_dir):
            output_dir = "Arthur/out/{}.apk".format(args.APK.split(".")[0])
            apk_tool_stat = self.runApkTool(
                ["b", apk_extract_dir, "--use-aapt2", "-o", output_dir])
            if apk_tool_stat.returncode == 0:
                print("Recompilation Complete")
                self.signApk(output_dir)
            else:
                print("Error In Recompilation")

    def runApkTool(self, params):
        if os.name == "nt":
            args = ["apktool.bat"]
            args.extend(params)
            proc = subprocess.Popen(
                args, stdin=subprocess.PIPE, stdout=getStdout())
            proc.communicate(b"\r\n")
            return proc
        else:
            args = ["apktool"]
            args.extend(params)
            return subprocess.run(args, stdout=getStdout())

    def runenjarify(self, params):
        if len(params) != 0:
            args = ["Arthur/tools/enjarify/enjarify.sh"]
            args.extend(params)
            print("Converting APK to JAR")
            apk_to_jar_proc = subprocess.run(
                args, stdin=subprocess.PIPE, stdout=getStdout())
            return apk_to_jar_proc.returncode
        else:
            print("Please provide provide proper parameters for enjarify")

    def run_decompiler(self, params):
        if len(params) != 0:
            args = ['java', '-jar', "Arthur/tools/decompiler.jar", '-jar']
            args.extend(params)
            decompiler_proc = subprocess.run(
                args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            return decompiler_proc.returncode
        else:
            print("Please provide proper parameters for decompiler")

    def signApk(self, apk_path):
        # print(os.path.dirname(os.path.abspath(apk_path)))
        args = ['java', '-jar', "Arthur/tools/signer.jar", "-apk", apk_path]
        signer_proc = subprocess.run(
            args, stdin=subprocess.PIPE, stdout=getStdout())
        if signer_proc.returncode == 0:
            print("Signing Complete")
            apk_loc = os.path.dirname(os.path.abspath(apk_path)) + "/" + os.path.basename(
                apk_path).split(".")[0] + "-aligned-debugSigned.apk"
            apk_dest = "Arthur/out/{}-signed.apk".format(
                apk_path.split(".")[0])
            shutil.move(
                apk_loc, apk_dest)
        else:
            print("Error in Signing")
        return signer_proc.returncode


def getStdout():
    return subprocess.PIPE
