

from Arthur import apktool as apk
from Arthur import patcher as patch
from Arthur import helper as h
from Arthur import apkinfoextractor as aie
import os
import argparse


apktool = apk.Apktool()


def check_apk_file(path):
    return os.path.isfile(path)


def check_package_name(args):
    patch.Patcher(args)


def getArgs():
    if not hasattr(getArgs, "parsed_args"):
        parser = argparse.ArgumentParser(
            description="Arthur - Mobile Application Pentesting Framework")

        parser._action_groups.pop()

        required = parser.add_argument_group('required arguments')

        optional = parser.add_argument_group('optional arguments')

        # Required Arguments
        required.add_argument("-a", "--APK",
                              help="Path for the APK file to decompile")

        required.add_argument("-p", "--package",
                              help="Path for the APK file to decompile")

        # Optional Arguments
        optional.add_argument("-s", "--smali",
                              help="Get Smali Code from APK", default=True, action="store_true")

        optional.add_argument("-j", "--java",
                              help="Get Java Code from APK", default=False, action="store_true")

        optional.add_argument("-r", "--recompile",
                              help="Recompile APK", action="store_true")

        optional.add_argument("-t", "--sign", help="Sign APK",
                              action="store_true")

        optional.add_argument(
            "-g", "--report", help="Generate APK Report", default=False, action="store_true")

        getArgs.parsed_args = parser.parse_args()
    return getArgs.parsed_args


def checkPreReqs():
    return True


def decompile_apk(args):
    apk_path = args.APK
    if args.smali and args.java == False:
        apktool.decompile_apk(apk_path)
    elif args.java:
        apktool.decompile_as_java(apk_path)


if __name__ == '__main__':
    args = getArgs()
    if checkPreReqs():
        if(args.APK is None or args.APK is False):
            if(args.package is None or args.package is False):
                print(
                    "Please provide a path to an APK file or the path to a directory containing APK files")
                print("\nExample: python arthur.py -a /path/to/apk.apk")
                print(
                    "\nIf you need more help type 'python arthur.py -h' or 'python arthur.py --help'")
                exit(1)
            else:
                h().clean_project()
                check_package_name(args)
        else:
            if check_apk_file(args.APK):
                if args.recompile is False and args.report is False:
                    h.Helper().clean_project()
                    decompile_apk(args)
                else:
                    if args.report is False:
                        apktool.recompile_apk(args)

                if args.sign is True:
                    apktool.signApk(args.APK)

                if args.report is True:
                    # h.Helper().clean_project()
                    aie.ApkInfoExtractor(args)
                    

            else:
                print("Please provide a valid path to an APK file")
                print("\nExample: python arthur.py -a /path/to/apk.apk")
                print(
                    "\nIf you need more help type 'python arthur.py -h' or 'python arthur.py --help'")
                exit(1)
    else:
        print("Arthur preqs are not installed correctly. Please run 'python3 setup.py install' to install the requirements")
